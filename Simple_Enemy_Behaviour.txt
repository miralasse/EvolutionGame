public void update(float dt) {
        super.update(dt);

        if (scale < 0.2f) {
            active = false;
        }

        velocity.add(acceleration * (float) Math.cos(Math.toRadians(angle)) * dt, acceleration * (float) Math.sin(Math.toRadians(angle)) * dt);

        if (position.x < 0) {
            position.x = Rules.GLOBAL_WIDTH;
        }
        if (position.y < 0) {
            position.y = Rules.GLOBAL_HEIGHT;
        }
        if (position.x > Rules.GLOBAL_WIDTH) {
            position.x = 0;
        }
        if (position.y > Rules.GLOBAL_HEIGHT) {
            position.y = 0;
        }

        // <----- Мозги прописывать сюда

        tmp.set(position);
        float minDist = 10000.0f;
        for (int i = 0; i < gs.getConsumableEmitter().getActiveList().size(); i++) {
            if (gs.getConsumableEmitter().getActiveList().get(i).getType() == Consumable.Type.FOOD) {
                float distance = position.dst(gs.getConsumableEmitter().getActiveList().get(i).getPosition());
                if (distance < minDist) {
                    minDist = distance;
                    tmp.set(gs.getConsumableEmitter().getActiveList().get(i).getPosition());
                }
            }
        }

        float angleToTarget = tmp.sub(position).angle();
        if (angle > angleToTarget) {
            if (Math.abs(angle - angleToTarget) <= 180.0f) {
                angle -= 180.0f * dt;
            } else {
                angle += 180.0f * dt;
            }
        }
        if (angle < angleToTarget) {
            if (Math.abs(angle - angleToTarget) <= 180.0f) {
                angle += 180.0f * dt;
            } else {
                angle -= 180.0f * dt;
            }
        }
    }